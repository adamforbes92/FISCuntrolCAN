/* for defining all used variables, libraries, etc.
*/
#include <SPI.h>                   // for FIS display
#include <TLBFISLib.h>             // for FIS display

#include <LiquidCrystal_I2C.h>     // for LCD display

#include <KLineKWP1281Lib.h>       // for k-line diag (external to this proj.)
#include "FISCAN_configuration.h"  // for k-line diag (internal to this proj.)
#include "FISCAN_communication.h"  // for k-line diag (internal to this proj.)

#include <ESP32_CAN.h>             // for CAN

#include "OneButton.h"             // for monitoring the stalk buttons - it's easier to use a lib. than parse each loop - and it counts hold presses
//#include <BluetoothSerial.h>  // for ESP32 built-in Bluetooth - used for OpenHaldex
#include <TickTwo.h>                      // for repeated tasks

#define serialDebug 1                     // if 1, will Serial print
#define ChassisCANDebug 0                 // if 1, will print CAN 1 (Chassis) messages

#define hasLCD 0                          // toggle for LCD display
#define hasFIS 1                          // toggle for FIS display
#define lcdRow 20                         // lcd size
#define lcdColumn 4                       // lcd size

#define showBootScreen 1                  // 0 = off, 1 = Welcome message, 2 = Custom Logo
#define checkLED 0                        // 0 = off, 1 = do LED check (for debug ONLY, disable on release)
#define bootTime 2000                     // boot logo duration

#define hasK 1                            // use K-line for diag
#define hasCAN 0                          // use CAN for diag - needs a lot of work!  What variables do we want to see?
#define hasHaldex 1                       // has OpenHaldex

#define logFrequency 250                  // logs Per Second
#define ignitionMonitorPin 35             // for monitoring ignition signal via. optocoupler

#define K_TX 17                           // TX pin for K-line (MC33290)
#define K_RX 16                           // RX pin for K-line (MC33290)
#define pinCAN_RX 14                      // RX pin for SN65HVD230 (CAN_RX)
#define pinCAN_TX 13                      // TX pin for SN65HVD230 (CAN_TX)

#define fisCLK 18                         // FIS Clock Output - these are default CLK for ESP32
#define fisDATA 23                        // FIS Data Output - these are default MOSI for ESP32
#define fisENA 19                         // FIS Enable Output - required, but set to 19 (chip select) for ESP32
#define screenSize TLBFISLib::FULLSCREEN  // use the full screen for the FIS
//#define screenSize TLBFISLib::HALFSCREEN  // use the half screen (bottom half) for the FIS
#define SPI_INSTANCE SPI         // SPI interface for FIS

#define stalkPushUp 36           // input stalk UP
#define stalkPushDown 39         // input stalk DOWN
#define stalkPushReset 34        // input stalk RESET

#define stalkPushUpReturn 25     // if FIS disable - use this to match stalk UP
#define stalkPushDownReturn 26   // if FIS disable - use this to match stalk DOWN
#define stalkPushResetReturn 27  // if FIS disable - use this to match stalk RESET

#define deviceName "FISCuntrol"  // for ESP32 Bluetooth name - so that it's visible on other devices
#define btRefresh 500            // BT Send Data Refresh in ms
#define btDiscoverTime 5000      // delay time for finding other devices

#define APP_MSG_STATUS 1
#define fisCuntrol_ID 0x7B0
#define openHaldex_ID 0x7C0
#define canRefresh 50

#define arraySize(array) (sizeof((array)) / sizeof((array)[0]))  // generic array size calculator, handy to have
#define serialPacketEnd 0xFF                                     // define Bluetooth Serial Packet end

#define MOTOR1_ID 0x280
#define MOTOR2_ID 0x288
#define MOTOR3_ID 0x380
#define MOTOR5_ID 0x480
#define MOTOR6_ID 0x488
#define MOTOR7_ID 0x588
#define MOTOR_FLEX_ID 0x580
#define GRA_ID 0x38A
#define BRAKES1_ID 0x1A0
#define BRAKES2_ID 0x2A0
#define BRAKES3_ID 0x4A0
#define BRAKES5_ID 0x5A0
#define HALDEX_ID 0x2C0

// Haldex mode types
typedef enum openhaldex_mode_id {
  MODE_STOCK,
  MODE_FWD,
  MODE_5050,
  MODE_CUSTOM
} openhaldex_mode_id;

typedef struct openhaldexState {
  openhaldex_mode_id mode;
  byte ped_threshold;
  bool mode_override;
} openhaldexState;

extern char* connectingToK = "Connecting...";
extern char* connectedToK = "Connected...";

extern char* connectingToCAN = "Connecting...";
extern char* connectedToCAN = "Connected...";

extern char* haldexOptions[] = { "OpenHaldex", "Stock", "FWD", "5050" };
extern char* connectingToOpenHaldex = "Connecting...";
extern char* connectedToOpenHaldex = "Connected...";

// Bluetooth options (for basic BLE):
//esp_spp_sec_t sec_mask = ESP_SPP_SEC_NONE;  // or ESP_SPP_SEC_ENCRYPT|ESP_SPP_SEC_AUTHENTICATE to request pincode confirmation
//esp_spp_role_t role = ESP_SPP_ROLE_SLAVE;   // or ESP_SPP_ROLE_MASTER
char* p;

extern bool ignitionState = false;         // variable for reading the ignition pin status
extern bool ignitionStateRunOnce = false;  // variable for reading the first run loop
extern bool fisDisable = false;            // is the FIS turned off?
extern bool fisBeenToggled = false;        // been toggled on/off?  Don't display welcome if!
extern bool btConnected = false;           // is the Bluetooth connected?
extern bool runOnce = false;               // for launching boot LCD/FIS
extern bool showHaldex = false;            // for displaying Haldex options instead of data
extern bool isConnectedK = false;          // for monitoring k-line/CAN connection...
extern bool isConnectedCAN = false;
extern bool hasOpenHaldex = false;
extern bool mimickOK = true;

extern byte vehicleSpeed = 0;
extern byte haldexEngagement = 0;
extern byte haldexState = 0;
extern float lockTarget = 0;
extern float pedValue = 0;
extern int boardSoftwareVersion = 0;
extern uint32_t lastTransmission = 0;
extern int lastMode = 0;
extern int lastBlock = -1;
extern int lastHaldex = -1;
extern unsigned long lastDataRetrieve = 0;  // for checking if it's time to get more data...

extern int vehicleRPM = 0;       // current RPM
extern bool vehicleEML = false;  // current EML light status
extern bool vehicleEPC = false;  // current EPC light status
extern int calcSpeed = 0;        // temp var for calculating speed

byte btIncoming[10];
byte btOutgoing[4];
int incomingLen;

extern String fisLine[8] = { "" };

extern const unsigned char logo[] PROGMEM = {
  0xff, 0xff, 0xc0, 0x7e, 0x00, 0x03, 0xff, 0xf0, 0xff, 0xff, 0xc0, 0x7e, 0x00, 0x03, 0xff, 0xf8,
  0xff, 0xff, 0xc0, 0x7e, 0x00, 0x03, 0xff, 0xfc, 0xff, 0xff, 0xc0, 0x7e, 0x00, 0x03, 0xff, 0xfc,
  0xff, 0xff, 0xc0, 0x7e, 0x00, 0x03, 0xff, 0xfc, 0xff, 0xff, 0xc0, 0x7e, 0x00, 0x03, 0xff, 0xfc,
  0x03, 0xf0, 0x00, 0x7e, 0x00, 0x03, 0xf0, 0x3c, 0x03, 0xf0, 0x00, 0x7e, 0x00, 0x03, 0xf0, 0x3c,
  0x03, 0xf0, 0x00, 0x7e, 0x00, 0x03, 0xff, 0xfc, 0x03, 0xf0, 0x00, 0x7e, 0x00, 0x03, 0xff, 0xf8,
  0x03, 0xf0, 0x00, 0x7e, 0x00, 0x03, 0xff, 0xf0, 0x03, 0xf0, 0x00, 0x7e, 0x00, 0x03, 0xff, 0xfc,
  0x03, 0xf0, 0x00, 0x7e, 0x00, 0x03, 0xff, 0xfe, 0x03, 0xf0, 0x00, 0x7e, 0x00, 0x03, 0xff, 0xff,
  0x03, 0xf0, 0x00, 0x7e, 0x00, 0x03, 0xf0, 0x3f, 0x03, 0xf0, 0x00, 0x7e, 0x00, 0x03, 0xf0, 0x3f,
  0x03, 0xf0, 0x00, 0x7f, 0xfe, 0x03, 0xff, 0xff, 0x03, 0xf0, 0x00, 0x7f, 0xfe, 0x03, 0xff, 0xff,
  0x03, 0xf0, 0x00, 0x7f, 0xfe, 0x03, 0xff, 0xff, 0x03, 0xf0, 0x00, 0x7f, 0xfe, 0x03, 0xff, 0xff,
  0x03, 0xf0, 0x00, 0x7f, 0xfe, 0x03, 0xff, 0xfe, 0x03, 0xf0, 0x00, 0x7f, 0xfe, 0x03, 0xff, 0xfc,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xc0, 0x07, 0xe0, 0x00, 0xff, 0xff,
  0xff, 0xff, 0xc0, 0x07, 0xe0, 0x01, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x07, 0xe0, 0x03, 0xff, 0xff,
  0xff, 0xff, 0xc0, 0x07, 0xe0, 0x03, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x07, 0xe0, 0x03, 0xff, 0xff,
  0xff, 0xff, 0xc0, 0x07, 0xe0, 0x03, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x07, 0xe0, 0x03, 0xf0, 0x00,
  0xfc, 0x00, 0x00, 0x07, 0xe0, 0x03, 0xf0, 0x00, 0xfc, 0x00, 0x00, 0x07, 0xe0, 0x03, 0xff, 0xfc,
  0xfc, 0x00, 0x00, 0x07, 0xe0, 0x03, 0xff, 0xfe, 0xff, 0xfc, 0x00, 0x07, 0xe0, 0x03, 0xff, 0xff,
  0xff, 0xfc, 0x00, 0x07, 0xe0, 0x03, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x07, 0xe0, 0x01, 0xff, 0xff,
  0xff, 0xfc, 0x00, 0x07, 0xe0, 0x00, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x07, 0xe0, 0x00, 0x00, 0x3f,
  0xff, 0xfc, 0x00, 0x07, 0xe0, 0x00, 0x00, 0x3f, 0xfc, 0x00, 0x00, 0x07, 0xe0, 0x03, 0xff, 0xff,
  0xfc, 0x00, 0x00, 0x07, 0xe0, 0x03, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x07, 0xe0, 0x03, 0xff, 0xff,
  0xfc, 0x00, 0x00, 0x07, 0xe0, 0x03, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x07, 0xe0, 0x03, 0xff, 0xfe,
  0xfc, 0x00, 0x00, 0x07, 0xe0, 0x03, 0xff, 0xfc
};

//64x88
extern const unsigned char finger[] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x7f, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xc0, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x8f, 0xaf, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0x9f, 0xd7, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xdf, 0xd7, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xeb, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xeb, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xcb, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xdf, 0x03, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xc0, 0x0d, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe1, 0xfd, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xbf, 0xfd, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xbf, 0xfd, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xb0, 0x7d, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xb8, 0x3d, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xbf, 0xfd, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xbf, 0xfd, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xbf, 0xfd, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xbf, 0xfd, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xbf, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xbf, 0xfe, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xdf, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xdf, 0xfe, 0xe3, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xdf, 0xfe, 0xc9, 0xff, 0xff, 0xff, 0xff, 0xff, 0xdf, 0xfe, 0xcd, 0x7f, 0xff,
  0xff, 0xff, 0xff, 0xdc, 0x1e, 0x8e, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xdf, 0xfe, 0x01, 0x3f, 0xff,
  0xff, 0xff, 0xff, 0x9f, 0xfe, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xc0, 0x1f, 0x1f, 0x70, 0x0f, 0xff,
  0xff, 0xff, 0x01, 0x9f, 0xff, 0xe3, 0x8f, 0xff, 0xff, 0xfe, 0x43, 0x9f, 0x8f, 0xff, 0x87, 0xff,
  0xff, 0xe0, 0xff, 0xde, 0x3f, 0xff, 0xd3, 0xff, 0xff, 0x99, 0xff, 0xdf, 0xff, 0xff, 0xd9, 0xff,
  0xff, 0x0d, 0xff, 0xdf, 0xff, 0xff, 0xdc, 0xff, 0xfe, 0x1d, 0xff, 0xdf, 0xff, 0xff, 0xee, 0xff,
  0xfc, 0x7d, 0xff, 0xdf, 0xff, 0xff, 0xee, 0x7f, 0xfd, 0xfd, 0xff, 0xdf, 0xff, 0xff, 0xef, 0x3f,
  0xfd, 0xfd, 0xff, 0xdf, 0xff, 0xff, 0xef, 0x3f, 0xfd, 0xfd, 0xff, 0xdf, 0xff, 0xff, 0xef, 0x3f,
  0xfd, 0xfd, 0xff, 0xdf, 0xff, 0xff, 0xee, 0x7f, 0xfd, 0xfd, 0xff, 0xdf, 0xff, 0xff, 0xee, 0x7f,
  0xf9, 0xfd, 0xff, 0xdf, 0xff, 0xff, 0xec, 0xff, 0xf9, 0xfd, 0xff, 0xdf, 0xff, 0xff, 0xf1, 0xff,
  0xf9, 0xfd, 0xff, 0xdf, 0xff, 0xff, 0xf3, 0xff, 0xf9, 0xfd, 0xff, 0xdf, 0xff, 0xff, 0xf3, 0xff,
  0xfd, 0xfd, 0xff, 0xdf, 0xff, 0x7f, 0xf7, 0xff, 0xfd, 0xfd, 0xff, 0xdf, 0xff, 0x7f, 0xf7, 0xff,
  0xf9, 0xfc, 0xff, 0xdf, 0xff, 0x7f, 0xf7, 0xff, 0xf9, 0xfc, 0xff, 0xff, 0xff, 0xff, 0xf7, 0xff,
  0xfb, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf7, 0xff, 0xfb, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf7, 0xff,
  0xfd, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xf7, 0xff, 0xfd, 0xfd, 0xff, 0xff, 0xff, 0x7f, 0xef, 0xff,
  0xfe, 0xfd, 0xff, 0xff, 0xff, 0x3f, 0xef, 0xff, 0xff, 0x8f, 0xff, 0xfb, 0xff, 0x3f, 0xdf, 0xff,
  0xff, 0xe7, 0xff, 0xf7, 0xff, 0x3f, 0xbf, 0xff, 0xff, 0xf9, 0xff, 0xf7, 0xff, 0x7f, 0x7f, 0xff,
  0xff, 0xfc, 0xff, 0xff, 0xff, 0xfc, 0xff, 0xff, 0xff, 0xfe, 0x7f, 0xff, 0xff, 0xc3, 0xff, 0xff,
  0xff, 0xff, 0x3f, 0xff, 0xff, 0x9f, 0xff, 0xff, 0xff, 0xff, 0x87, 0x9f, 0xff, 0x7f, 0xff, 0xff,
  0xff, 0xff, 0xe0, 0x03, 0xfc, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0xf8, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xfe, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

//25x25
extern const unsigned char qr[] PROGMEM = {
  0xfe, 0x2a, 0x3f, 0x80, 0x82, 0x6a, 0xa0, 0x80, 0xba, 0x62, 0xae, 0x80, 0xba, 0xaf, 0xae, 0x80,
  0xba, 0x94, 0xae, 0x80, 0x82, 0x66, 0xa0, 0x80, 0xfe, 0xaa, 0xbf, 0x80, 0x00, 0x4b, 0x00, 0x00,
  0xc7, 0x6f, 0x0c, 0x00, 0xf9, 0x33, 0x1f, 0x00, 0x6a, 0xcb, 0x1d, 0x80, 0x31, 0xa1, 0xf4, 0x80,
  0xb7, 0x68, 0xb0, 0x80, 0xa8, 0x35, 0x51, 0x00, 0x8e, 0xaf, 0x7d, 0x80, 0x8d, 0xd1, 0xb6, 0x80,
  0xb2, 0xe7, 0xfa, 0x00, 0x00, 0x94, 0x88, 0x00, 0xfe, 0xfc, 0xa8, 0x80, 0x82, 0xa3, 0x88, 0x00,
  0xba, 0x3f, 0xfb, 0x00, 0xba, 0x37, 0xe1, 0x80, 0xba, 0x66, 0x06, 0x80, 0x82, 0xa1, 0x98, 0x80,
  0xfe, 0xf0, 0xe4, 0x80
};